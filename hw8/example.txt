#include <iostream>
using std::cout;
using std::endl;
using std::string;
#include <fstream>
using std::ifstream;
#include <vector>
using std::vector;

class RGBImage {
public:
  RGBImage() : _xres(0), _yres(0), _maxval(0) { cout << "DEFAULT" << endl; }
  RGBImage(string fname) ;
  ~RGBImage() { cout << "DESTRUCTOR" << endl; }
  void toASCII() ;
private:
  int _xres, _yres, _maxval;
  vector<int> _image;
};

RGBImage::RGBImage(string infile)
{
  // open the file
  ifstream fin(infile);
  if (!fin) {
    cout << "Error opening " << infile << endl;
    exit(1);
  }
  cout << "Opened " << infile << endl;

  // read the magic number
  string line;
  getline(fin, line);
  if (!fin) { cout << "Error reading stream" << endl; exit(2); }
  if (line.size() < 2 || line.at(0)!='P' || line.at(1) !='3') {
    cout << "Unable to read magic number P3" << endl;
    exit(3);
  }
  cout << "PPM (text)" << endl;

  // quick and dirty - process comment
  getline(fin, line);
  if (!fin) { cout << "Error reading stream" << endl; exit(2); }
  if (line[0] == '#') {
    cout << "Ignoring comment" << endl;
  }

  // this won't handle comments
  fin >> _xres >> _yres >> _maxval;
  if (!fin) { cout << "Error reading stream" << endl; exit(2); }
  // need to validate input!
  cout << "Image size: " << _xres << " x " << _yres << endl;
  cout << "Maxval = " << _maxval << endl;

  // loop for _xres * _yres iterations
  int r, g, b;
  for ( int i=0 ; i<_xres*_yres ; i++ ) {
    fin >> r >> g >> b;
    if (!fin) {
      cout << "Error reading stream" << endl;
      if (fin.eof()) cout << "Reached end of file" << endl;
      exit(4);
    }
    // check r,g,b are between 0 and _maxval
    // save to vector - change to Pixel class / Image class
    _image.push_back(r);
    _image.push_back(g);
    _image.push_back(b);
  }
}

void RGBImage::toASCII()
{
  int iy;
  double y;
  string values = "@@@###***+++--- ";
  int r, g, b;
  int index=0;

  for ( int i=0 ; i<_xres*_yres ; i++,index+=3 ) {

    r = _image[index];
    g = _image[index+1];
    b = _image[index+2];

    // Y = 0.2126R + 0.7152G + 0.0722B (from HW7)
    y = 0.2126*r + 0.7152*g + 0.0722*b;

    if (y < 0.0 || y >= 256.0) cout << "ERROR!!!!!!!!!!!" << endl;
    iy = (int) y;
    // iy should be [0...255]
    if (iy < 0 || iy > 255) cout << "ERROR!!!!!!!!!!!!!!" << endl;
    iy /= 16;
    // iy should be [0...15]
    if (iy < 0 || iy > 15) cout << "ERROR!!!!!!!!!!!!!!" << endl;

    cout << values[iy];

    // to format ascii output properly
    if (i % _xres == (_xres-1)) cout << endl;
  }
}

int main()
{
  cout << "Program to convert a ppm to ascii art" << endl;

  RGBImage ppm("parrot.ppm");
  ppm.toASCII();

  cout << "Program finished" << endl;
}

#if 0
// TARGET for new main()
int main()
{
  cout << "Program to convert a ppm to ascii art" << endl;

  // move into functions
  readFile("parrot.ppm");
  rgb2ascii();

  // move into a class
  RGBImage ppm("parrot.ppm");
  ppm.toASCII();

  // future capabilities class can provide
  ppm.writeFile("newparrot.ppm");
  ppm.writePGMFile("newparrot.pgm");
}

#endif